// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER") // ADMIN, MANAGER, USER, ACCOUNTANT, SALES
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int           @default(0)
  sku         String        @unique
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  invoiceItems InvoiceItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("products")
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  company   String?
  invoices  Invoice[]
  leads     Lead[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("customers")
}

model Invoice {
  id         String        @id @default(cuid())
  number     String        @unique
  customerId String
  customer   Customer      @relation(fields: [customerId], references: [id])
  items      InvoiceItem[]
  subtotal   Float
  tax        Float         @default(0)
  total      Float
  status     String        @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  dueDate    DateTime?
  paidDate   DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float

  @@map("invoice_items")
}



model Lead {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  company      String?
  status       String        @default("NEW") // NEW, CONTACTED, QUALIFIED, PROPOSAL, NEGOTIATION, CLOSED_WON, CLOSED_LOST
  source       String?
  value        Float?
  customerId   String?
  customer     Customer?     @relation(fields: [customerId], references: [id])
  interactions Interaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("leads")
}

model Interaction {
  id          String   @id @default(cuid())
  leadId      String
  lead        Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type        String   // EMAIL, CALL, MEETING, NOTE
  subject     String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("interactions")
}
